#*******************
#  SPINDLE
#*******************
#
# Implement spindle vfd control using encoder.
# 
loadrt near names=near_spindle
loadrt lowpass count=1

addf near_spindle servo-thread
addf lowpass.0 servo-thread

# ---Encoder feedback signals/setup---

setp    [MESA](CARD0).encoder.02.counter-mode 0
setp    [MESA](CARD0).encoder.02.filter 1
setp    [MESA](CARD0).encoder.02.index-invert 0
setp    [MESA](CARD0).encoder.02.index-mask 0
setp    [MESA](CARD0).encoder.02.index-mask-invert 0
setp    [MESA](CARD0).encoder.02.scale  [SPINDLE_0]ENCODER_SCALE

net encoder-position         <=   [MESA](CARD0).encoder.02.position
net encoder-velocity         <=   [MESA](CARD0).encoder.02.velocity
net encoder-velocity-rpm     <=   [MESA](CARD0).encoder.02.velocity-rpm
net spindle-index-enable     <=>  [MESA](CARD0).encoder.02.index-enable

# ---setup spindle control signals---
net encoder-position           =>  spindle.0.revs
net encoder-velocity           =>  spindle.0.speed-in


#setp spindle.0.at-speed true
net spindle-at-speed          =>  spindle.0.at-speed

net spindle-velocity-cmd      <=  spindle.0.speed-out-abs           
net spindle-enable            <=  spindle.0.on         
net spindle-cw                <=  spindle.0.forward   
net spindle-index-enable      <=> spindle.0.index-enable

#
# Spindle pid.s settings.
#
setp   pid.s.Pgain     [SPINDLE_0]P
setp   pid.s.Igain     [SPINDLE_0]I
setp   pid.s.Dgain     [SPINDLE_0]D
setp   pid.s.bias      [SPINDLE_0]BIAS
setp   pid.s.FF0       [SPINDLE_0]FF0
setp   pid.s.FF1       [SPINDLE_0]FF1
setp   pid.s.FF2       [SPINDLE_0]FF2
setp   pid.s.deadband  [SPINDLE_0]DEADBAND
setp   pid.s.maxoutput [SPINDLE_0]MAX_OUTPUT
setp   pid.s.error-previous-target true
setp   pid.s.maxerrorI 1.0

net spindle-velocity-cmd  =>  pid.s.command
net spindle-enable        =>  pid.s.enable        
net spindle-index-enable  <=> pid.s.index-enable
net spindle-output        <=  pid.s.output        
net encoder-rpm-filtered  =>  pid.s.feedback

#
# Use Mesa 7i92 stepgen 4 as PWM 0 output.
# Output type 1: PWM on Out0, Dir on Out1.
#
setp [MESA](CARD0).pwmgen.00.output-type    1

setp [MESA](CARD0).pwmgen.pwm_frequency  1000
setp [MESA](CARD0).pwmgen.00.scale       1000
setp [MESA](CARD0).pwmgen.00.offset-mode false
setp [MESA](CARD0).pwmgen.00.out0.invert_output true

net spindle-output  => [MESA](CARD0).pwmgen.00.value
net spindle-enable  => [MESA](CARD0).pwmgen.00.enable

#
# Use Mesa Solid State Relay for outputs. 
#
setp [MESA](CARD0).ssr.00.invert-01 true
net spindle-enable             => [MESA](CARD0).ssr.00.out-00
net spindle-cw                 => [MESA](CARD0).ssr.00.out-01  
#
# Compare encoder rpm to spindle command to determine if spindle is up to speed.
# Use the filtered encoder values.
# 100hz gain=0.466
#  10hz gain=0.0609
#   1hz gain=0.0063

setp lowpass.0.gain 0.0063
setp near_spindle.scale 1.25

net encoder-velocity-rpm        => lowpass.0.in
net encoder-rpm-filtered        <= lowpass.0.out     

#net encoder-rpm-filtered        => scale.0.in
#net spindle-fb-filtered         <= scale.0.out                  
#
# See if we are near enough to be considered at speed.
#
net encoder-rpm-filtered  => near_spindle.in1
#net spindle-velocity-cmd => near_spindle.in2

#
# Manually turning the spindle to align threading tool to existing threads.
#
net encoder-rpm-filtered => near_spindle.in2



net spindle-at-speed     <= near_spindle.out