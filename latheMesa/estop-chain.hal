#
# This file contains the Hardware Abstraction Level for connecting driver alarms and encoder alarms to the e-stop.
# Based on https://forum.linuxcnc.org/10-advanced-configuration/32789-educate-me-about-estop-chains-and-latches?start=10#93394
#

#
# The default setup has estop-out <= iocontrol.0.user-enable-out => iocontrol.0.emc-enable-in. 
# This file inserts a chain of estop latches between user-enable-out and emc-enable-in.
# Set up multiple estop latches for G540 driver and encoder quadrature faults.
#
loadrt estop_latch count=4

addf estop-latch.0            servo-thread
addf estop-latch.1            servo-thread
addf estop-latch.2            servo-thread
addf estop-latch.3            servo-thread

#
# Even with TWO_PASS, I was having problems using and2 conflicting with the post gui loadrt???
# Use a lut5 to implement a simple and.
#loadrt and2 names=and2_estop 
loadrt lut5 names=lut5_estop
addf lut5_estop servo-thread
setp lut5_estop.function 0x08

#
# Enable Z quad errors when RPM is within +-300RPM of zero.
#
loadrt near names=near-300
addf near-300 servo-thread

#
# Enable the XZ encoder quadrature error detection whenever machine-is-on.
# 
net machine-is-on <= halui.machine.is-on           => [MESA](CARD0).encoder.00.quad-error-enable [MESA](CARD0).encoder.01.quad-error-enable 
net latch-reset                                    => [MESA](CARD0).encoder.00.reset             [MESA](CARD0).encoder.01.reset             [MESA](CARD0).encoder.02.reset


#
# Spindle encoder quadrature error is only reliable up to +-300 RPM.
#
setp near-300.scale 1.0
setp near-300.difference 300.0
setp near-300.in1   0.0
#net spindle-cmd         => near-300.in2
net encoder-rpm-filtered         => near-300.in2

net en-spindle-quad     <= near-300.out     => lut5_estop.in-0
net machine-is-on                           => lut5_estop.in-1
net enable-spindle-quad <= lut5_estop.out   => [MESA](CARD0).encoder.02.quad-error-enable 

#
#   Reset signal for each latch.
#
net latch-reset <= iocontrol.0.user-request-enable => estop-latch.0.reset  estop-latch.1.reset estop-latch.2.reset estop-latch.3.reset 
#
#  Hook the first latch to Linuxcnc iocontrol stuff.
#
net latch0-ok-in <= iocontrol.0.user-enable-out => estop-latch.0.ok-in
#
#  Connect each ok_out to the next ok_in to create a chain of latches.
#
net latch0-out <= estop-latch.0.ok-out => estop-latch.1.ok-in
net latch1-out <= estop-latch.1.ok-out => estop-latch.2.ok-in
net latch2-out <= estop-latch.2.ok-out => estop-latch.3.ok-in
#
#   Last estop in the chain tells LinuxCNC we have an estop.
#
net estop-out <= estop-latch.3.ok-out => iocontrol.0.emc-enable-in 
#
#   Connect various inputs to the estop latch fault_in pins 
#
net estop-G540      <= [MESA](CARD0).gpio.000.in    => estop-latch.0.fault-in

# --- Encoder faults ---
net x-encoder-estop <= [MESA](CARD0).encoder.00.quad-error => estop-latch.1.fault-in
net z-encoder-estop <= [MESA](CARD0).encoder.01.quad-error => estop-latch.2.fault-in
net s-encoder-estop <= [MESA](CARD0).encoder.02.quad-error => estop-latch.3.fault-in





