#
# This file contains the Hardware Abstraction Level for connecting driver alarms and encoder alarms to the e-stop.
# Based on https://forum.linuxcnc.org/10-advanced-configuration/32789-educate-me-about-estop-chains-and-latches?start=10#93394
#

#
# The default setup has estop-out <= iocontrol.0.user-enable-out => iocontrol.0.emc-enable-in. 
# This file inserts a chain of estop latches between user-enable-out and emc-enable-in.
# Set up an estop latches for stepper motor driver alarm, probe overtravel, and VFD faults.
# Use the amp-fault-in for x, y, z, spindle encoder quadrature faults.
loadrt estop_latch count=3

addf estop-latch.0            servo-thread
addf estop-latch.1            servo-thread
addf estop-latch.2            servo-thread

#
#   Reset signal for each latch.
#
net latch-reset <= iocontrol.0.user-request-enable => estop-latch.0.reset estop-latch.1.reset estop-latch.2.reset 
#
#  Hook the first latch to Linuxcnc iocontrol stuff.
#
net latch0-ok-in <= iocontrol.0.user-enable-out => estop-latch.0.ok-in
#
#  Connect each ok_out to the next ok_in to create a chain of latches.
#  Last estop in the chain tells LinuxCNC we have an estop.
#
net latch0-out <= estop-latch.0.ok-out => estop-latch.1.ok-in
net latch1-out <= estop-latch.1.ok-out => estop-latch.2.ok-in
net estop-out <= estop-latch.2.ok-out => iocontrol.0.emc-enable-in 

#
#   Connect various inputs to the estop latch fault_in pins.
#   These signal names are linked to messages (see *.ini)
#

# --- Closed loop stepper driver alarm ---
# Use joint.N.amp-fault-in instead of estop-latch?
#
net estop-driver            <= hm2_7i92.0.gpio.029.in_not       => estop-latch.0.fault-in
net estop-overtravel        <= hm2_7i92.0.gpio.025.in           => estop-latch.1.fault-in
net estop-VFD               <= hm2_7i92.0.gpio.031.in_not       => estop-latch.2.fault-in

# --- Encoder faults ---
# Use amp-fault-in pins instead of the estop chain. This will require restart and rehome. (Spindle can be reset? May not want spindle to require restart??? )
#
net estop-x-encoder         <= hm2_7i92.0.encoder.00.quad-error => joint.0.amp-fault-in
net estop-y-encoder         <= hm2_7i92.0.encoder.01.quad-error => joint.1.amp-fault-in
net estop-z-encoder         <= hm2_7i92.0.encoder.02.quad-error => joint.2.amp-fault-in
net estop-s-encoder         <= hm2_7i92.0.encoder.03.quad-error => spindle.0.amp-fault-in

#
# Resetting the encoder and enabling the quad error are slightly more complicated.
# Resetting the encoder will zero the position and must not be done after homing. (or you need to rehome) Best solution is once per linuxcnc session.
# The quad errors don't seem to be initialized correctly? Need to reset the encoder with quad error false to clear any quad errors before enabling quad errors.
#
#
# The initial condition of the ff output is important! This will go true the first estop request and stay true until linuxcnc is restarted.
#
#setp ff_encoder.out     false How does this initialize????
#setp ff_encoder.set     false
#setp ff_encoder.reset   false

#net latch-reset     => and2_ff_clk.in1
#net ff-latch-once   <= and2_ff_clk.out          => ff_encoder.clk 
#net ff-Q            <= ff_encoder.out           => hm2_7i92.0.encoder.00.reset  hm2_7i92.0.encoder.01.reset hm2_7i92.0.encoder.02.reset hm2_7i92.0.encoder.03.reset
#net ff-Qnot         <= ff_encoder.out-not       => ff_encoder.data

#
# encoder quad errors get cleared when the enable is false. Keep quad-error-enable cleared until out of estop. 
# (only waiting for halui.machine.is-on sometimes came up with errrors.)
# (only waiting for latch-reset sometimes came up with errors.)
# (even waiting for estop-out sometimes came up with errors??? Doesn't seem like errors are cleared when enable is low, maybe only cleared on the T->F transition?
net machine-is-on  => hm2_7i92.0.encoder.00.quad-error-enable hm2_7i92.0.encoder.01.quad-error-enable hm2_7i92.0.encoder.02.quad-error-enable hm2_7i92.0.encoder.03.quad-error-enable 





