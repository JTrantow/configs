#
# This file contains the Hardware Abstraction Level for e-stop hardware signals.
# Based on https://forum.linuxcnc.org/10-advanced-configuration/32789-educate-me-about-estop-chains-and-latches?start=10#93394
#

#
# The default setup has estop-out <= iocontrol.0.user-enable-out => iocontrol.0.emc-enable-in. 
# This file inserts a chain of estop latches between user-enable-out and emc-enable-in.
# Set up estop latches for:
#   -   Hardware switch connected to parport pin 10.
#   -   Stepper driver faults connected to ???
#   -   VFD driver fault connected to ???

loadrt estop_latch count=1

addf estop-latch.0            servo-thread
#addf estop-latch.1            servo-thread
#addf estop-latch.2            servo-thread

#
#   Reset signal for each latch comes from user-request-enable pin.
#
net latch-reset <= iocontrol.0.user-request-enable => estop-latch.0.reset 
#estop-latch.1.reset estop-latch.2.reset
#
#  Hook the first latch ok-in to iocontrol user-enable-out.
#
net latch0-ok-in <= iocontrol.0.user-enable-out => estop-latch.0.ok-in
#
#  Connect each ok_out to the next ok_in to create a chain of latches.
#
#net latch0-out <= estop-latch.0.ok-out => estop-latch.1.ok-in
#net latch1-out <= estop-latch.1.ok-out => estop-latch.2.ok-in
#
#   Last estop in the chain tells LinuxCNC we have an estop.
#
net estop-out <= estop-latch.2.ok-out => iocontrol.0.emc-enable-in 
#
#   Connect various input signals to the estop latch fault_in pins.
#   These signals are defined for my router as connected to parallel port pins.
#
net estop-ext => estop-latch.0.fault-in
#net stepper-fault => estop-latch.1.fault-in
#net vfd-fault => estop-latch.2.fault-in
