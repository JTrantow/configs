( DRO sampling of axis realized response to motion commands	from https://forum.linuxcnc.org/38-general-linuxcnc-questions/36044-possible-error-in-logic-of-linuxcnc-homing-with-leadscrew-compensation		)
( Creates or appends to file _.log in the configuration directory		)
(										)
( This program requires the LinuxCNC HAL-reading feature.	)
(   [RS274NGC]									)
(   HAL_PIN_VARS = 1 )

( ----------------------------------------------------------------------------- )
( Manually configure the constants in this section for the desired sampling run	)
( You also need to change the axis letters and the mesa symbols to match your config.)
( Search for AXIS_ and JOINT_ and G to find these change locations.                         )
( ----------------------------------------------------------------------------- )
#<_samples> = [170+1]	( Number of samples to be taken across the range, >= 2	)
#<_dwell> = 1.0		( Seconds of dwell time to settle mechanically, >= 0.0	)

#<_MIN_LIMIT> =   5.0 (#<_ini[AXIS_Y]MIN_LIMIT> )
#<_MAX_LIMIT> = 175.0 ([#<_ini[AXIS_Y]MAX_LIMIT> - 10]) 
#<_feedrate> = [#<_ini[AXIS_Y]MAX_VELOCITY> * 60/2]	

#<_encoder_scale> = [#<_ini[JOINT_1]ENCODER_SCALE>]
#<_step_scale>    = [#<_ini[JOINT_1]STEP_SCALE>]
#<_home_offset>   = [#<_ini[JOINT_1]HOME_OFFSET>]

( ----------------------------------------------------------------------------- )
( Subroutine: log the current realtime sampling state and DRO measurement	)
( Format of log file lines emitted:						)
(     <commanded> <actuated> <dro> <diff>					)
( Where:									)
(   <commanded> = the G53 coordinate						)
(   <actuated> = the coordinate actuated by the realtime motion controller	)
(   <dro> = the DRO reading							)
(   <diff> = <actuated>-<dro>, which is the error at the <commanded> location	)
(	This diff value is logged to aid human inspection of raw results and to	)
(	make plotting a log file such as in gnuplot simpler.			)
o100 sub
    g4 p#<_dwell> ( Dwell )

    m66 p0 L0 ( Queue-buster with no other effect )
    #<commanded> = #1
    #<stepgen_pos> = #<_hal[hm2_7i92.0.stepgen.01.position-fb]>
    #<encoder_pos> = #<_hal[hm2_7i92.0.encoder.01.position]>
    (LOG,#<commanded> #<stepgen_pos> #<encoder_pos>)
o100 endsub

( ----------------------------------------------------------------------------- )
( Subroutine: Step the range #1 .. #2 of axis position, logging the experiment	)
( ----------------------------------------------------------------------------- )
o101 sub
    #<start> = [ #1 ]
    #<end>   = [ #2 ]
    o103 if [ #<start> gt #<end> ]
        (LOG,% NEGATIVE-GOING commanded stepgen_pos encoder_pos)
        (LOG,a2=[)
        #<min> = [ #<end> ]
        #<max> = [ #<start> ]
        #<incr> = [ - #<_step> ]
    o103 elseif [ #<start> lt #<end> ]
        (LOG,% POSITIVE-GOING commanded stepgen_pos encoder_pos)
        (LOG,a1=[)
        #<min> = [ #<start> ]
        #<max> = [ #<end> ]
        #<incr> = [ + #<_step> ]
    o103 else
        (LOG,% NON-GOING)
    o103 endif

    #<loc> = [ #<start> ]
    o102 while [ 1 ]
        o104 if [ #<loc> gt #<max> ]
            o101 return
        o104 endif
        o105 if [ #<loc> lt #<min> ]
            o101 return
        o105 endif
        g53 g1 f#<_feedrate> Y#<loc>
        o100 call [ #<loc> ]
        #<loc> = [ #<loc> + #<incr> ]
    o102 endwhile
    (LOG,];)
o101 endsub

( ----------------------------------------------------------------------------- )
( Main program which moves axis and samples points along the way.               ) 
( ----------------------------------------------------------------------------- )

(LOGOPEN,AxisMap.m)
(LOG,% Axis sampling in Octave/Matlab format.)

( Emit all configuration parameters and conditions to the log output, for use by post-processing programs. Note: I used Octave/Matlab. )
(LOG,MIN_LIMIT     = #<_MIN_LIMIT>)
(LOG,MAX_LIMIT     = #<_MAX_LIMIT>)
(LOG,SAMPLES       = #<_samples>)
(LOG,FEEDRATE      = #<_feedrate>)
(LOG,DWELL         = #<_dwell>)
(LOG,ENCODER_SCALE = #<_ini[JOINT_1]ENCODER_SCALE>)
(LOG,STEP_SCALE    = #<_ini[JOINT_1]STEP_SCALE>)
(LOG,HOME_OFFSET   = #<_ini[JOINT_1]HOME_OFFSET>)
(LOG,FERROR        = #<_ini[JOINT_1]FERROR>)
(LOG,MIN_FERROR    = #<_ini[JOINT_1]MIN_FERROR>)
(LOG,DEADBAND      = #<_ini[JOINT_1]DEADBAND>)

#<_step> = [ [ #<_MAX_LIMIT> - #<_MIN_LIMIT> ] / [ #<_samples> - 1] ]

( Starting move to most-positive end )
g53 g0 Y#<_MAX_LIMIT>
o101 call [ #<_MAX_LIMIT> ] [ #<_MIN_LIMIT> ]
o101 call [ #<_MIN_LIMIT> ] [ #<_MAX_LIMIT> ]

(g53 g0 Y[#<_MAX_LIMIT>/2 - #<_MIN_LIMIT>/2])

(LOGCLOSE)
(MSG, DONE)
m30